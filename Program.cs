using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace ProjectEulerConsoleCSharp
{
    class Program
    {
        static void Main(string[] args)
        {
            Problem3();

            //Thread.Sleep(5000);

            // Print out continue message
            Console.Write("\n\n" + "Press any key to continue...");

            // Wait for keypress
            Console.Read();
        }

        static void Problem1()
        {


            int total = 0;

            Console.Write("Multiples of 3 or 5 below 1000:\n");

            for (int i = 1; i < 1000; i++)
            {
                if ((i % 3) == 0 || (i % 5) == 0)
                {
                    Console.Write(i + "\n");

                    total += i;
                }
            }

            Console.Write("Total sum of all multiples:\t" + total);
        }

        static void Problem2()
        {
            // Holding variables
            int sum = 0;
            int temp = 0;
            int current = 1;
            int previous = 1;

            // Write out the problem
            Console.Write("Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n\n" +
                            "1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n\n" +
                            "By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.\n\n");

            // Computing loop
            while (current < 4000000)
            {
                // Write out current value
                Console.Write(current + "\n");

                // Check if current is even
                if (current % 2 == 0)
                {
                    // Add current to total sum
                    sum += current;
                }

                // Set temp value
                temp = current;

                // Set current value
                current = temp + previous;

                // Set previous value
                previous = temp;
            }

            // Print output
            Console.Write("\nTotal of even Fibonaci values under 4 million:\t" + sum);
        }

        static void Problem3()
        {
            // Problem text
            Console.Write("The prime factors of 13195 are 5, 7, 13 and 29." + "\n\n" +
                            "What is the largest prime factor of the number 600851475143 ? ");

            // Factor lists
            List<Int64> factors = new List<Int64>();
            List<Int64> primeFactors = new List<Int64>();

            // Target number
            Int64 target = 600851475143;

            // Test flags
            bool primeTestResult;

            // Progress output
            Console.Write("\n\n" + "Finding factors of " + target + "...");

            // Find factors of target
            for (Int64 i = 1; i < target; i++)
            {
                // Check for factorization
                if (i % target == 0)
                    factors.Add(i);
            }

            // Progress output
            Console.Write("\n\n" + "Finding factors that are prime...");
            
            // Find factors that are prime
            foreach (Int64 term in factors)
            {
                // Set result to true
                primeTestResult = true;

                // Prime test
                for (Int64 i = 0; i <= Math.Sqrt(term); i++)
                {
                    // Divide term by i, i is less than sqrt of term
                    // If result is an integer, term is not prime
                    // Mod term by i, if result is 0, term is not prime
                    if (term % i == 0)
                        // term is not prime, set result to false
                        primeTestResult = false;
                }

                if (primeTestResult == true)
                    primeFactors.Add(term);
            }

            Console.Write("Prime factors of " + target + " are:" + "\n\n");

            foreach (Int64 term in primeFactors)
            {
                Console.Write(term + "\n");
            }

            Console.Write("\n\n" + "Largest prime factor of " + target + " is " + primeFactors.Max());
        }
    }
}
